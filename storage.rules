rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
  // Documents and thumbnails - Public read, admin write
  match /documents/{allPaths=**} {
    allow read: if true; // Public read for documents
    allow write: if request.auth != null
      && validFileSize()
      && validDocumentType();
  }

  match /thumbnails/{allPaths=**} {
    allow read: if true; // Public read for thumbnails
    allow write: if request.auth != null
      && validImageSize()
      && validImageType();
  }

  // Videos/introduction - Public read, authenticated write
  match /videos/introduction/{allPaths=**} {
    allow read: if true; // Public read for introduction videos
    allow write: if request.auth != null
      && validVideoSize()
      && validVideoType();
  }

  // Video files - Public read
  match /Video/{allPaths=**} {
    allow read: if true;  // ai cũng xem được
    allow write: if request.auth != null
      && validFileSize()
      && validFileType();
  }
    // Heritage Spots files - Public read, authenticated write
    match /heritage-spots/{spotId}/{allPaths=**} {
      allow read: if true; // Cho phép tất cả đọc
      allow write: if request.auth != null
        && validFileSize()
        && validFileType()
        && validPath(spotId);

      allow delete: if request.auth != null;
    }

    // User files - Private read/write
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null
        && request.auth.uid == userId
        && validFileSize()
        && validFileType();
    }

    // Admin files - Admin only
    match /admin/{allPaths=**} {
      allow read, write: if request.auth != null
        && request.auth.token.admin == true;
    }

    // ===== VALIDATION FUNCTIONS =====

    // Validate file size (max 10MB for documents, 5MB for images)
    function validFileSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB max
    }

    // Validate file type
    function validFileType() {
      return request.resource.contentType.matches('image/.*')
        || request.resource.contentType == 'application/pdf'
        || request.resource.contentType == 'application/msword'
        || request.resource.contentType == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }

    // Validate document file types specifically
    function validDocumentType() {
      return request.resource.contentType == 'application/pdf'
        || request.resource.contentType == 'application/msword'
        || request.resource.contentType == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        || request.resource.contentType == 'text/plain';
    }

    // Validate image file types specifically
    function validImageType() {
      return request.resource.contentType.matches('image/.*');
    }

    // Validate video file types specifically
    function validVideoType() {
      return request.resource.contentType == 'video/mp4'
        || request.resource.contentType == 'video/mov'
        || request.resource.contentType == 'video/avi'
        || request.resource.contentType == 'video/webm'
        || request.resource.contentType == 'video/quicktime';
    }

    // Validate video file size (max 100MB)
    function validVideoSize() {
      return request.resource.contentType.matches('video/.*')
        && request.resource.size < 100 * 1024 * 1024; // 100MB for videos
    }    // Validate file path structure
    function validPath(spotId) {
      return spotId.size() > 0 && spotId.size() <= 50;
    }

    // Additional validation for images only
    function validImageSize() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024; // 5MB for images
    }
  }
}
