import {
  collection,
  doc,
  getDocs,
  getDoc,
  addDoc,
  updateDoc,
  query,
  where,
  orderBy,
  limit,
  Timestamp,
  writeBatch,
  onSnapshot
} from 'firebase/firestore';
import { db } from '../lib/firebase';
import {
  HeroContent,
  IntroductionContent,
  DocumentsContent,
  VRContent,
  MiniGameContent,
  NavigationContent,
  FooterContent,
  SiteConfig,
  SystemNotification
} from '../types/content';

// ===== CONTENT MANAGEMENT SERVICE =====

class ContentService {
  // Generic CRUD operations for any content type
  private async getActiveContent<T>(collectionName: string): Promise<T | null> {
    try {
      const q = query(
        collection(db, collectionName),
        where('isActive', '==', true),
        limit(1)
      );
      const snapshot = await getDocs(q);

      if (snapshot.empty) return null;

      const doc = snapshot.docs[0];
      return { id: doc.id, ...doc.data() } as T;
    } catch (error) {
      console.error(`Error fetching active ${collectionName}:`, error);
      throw error;
    }
  }

  private async updateContent<T>(
    collectionName: string,
    id: string,
    data: Partial<T>
  ): Promise<void> {
    try {
      const docRef = doc(db, collectionName, id);
      await updateDoc(docRef, {
        ...data,
        updatedAt: Timestamp.now()
      });
    } catch (error) {
      console.error(`Error updating ${collectionName}:`, error);
      throw error;
    }
  }

  private async createContent<T>(
    collectionName: string,
    data: Omit<T, 'id' | 'createdAt' | 'updatedAt'>
  ): Promise<string> {
    try {
      const docRef = await addDoc(collection(db, collectionName), {
        ...data,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });
      return docRef.id;
    } catch (error) {
      console.error(`Error creating ${collectionName}:`, error);
      throw error;
    }
  }

  // ===== HERO SECTION =====
  async getHeroContent(): Promise<HeroContent | null> {
    return this.getActiveContent<HeroContent>('heroContent');
  }

  async updateHeroContent(id: string, data: Partial<HeroContent>): Promise<void> {
    return this.updateContent<HeroContent>('heroContent', id, data);
  }

  async createHeroContent(data: Omit<HeroContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<HeroContent>('heroContent', data);
  }

  // ===== INTRODUCTION SECTION =====
  async getIntroductionContent(): Promise<IntroductionContent | null> {
    return this.getActiveContent<IntroductionContent>('introductionContent');
  }

  async updateIntroductionContent(id: string, data: Partial<IntroductionContent>): Promise<void> {
    return this.updateContent<IntroductionContent>('introductionContent', id, data);
  }

  async createIntroductionContent(data: Omit<IntroductionContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<IntroductionContent>('introductionContent', data);
  }

  // ===== DOCUMENTS SECTION =====
  async getDocumentsContent(): Promise<DocumentsContent | null> {
    // Use dedicated documents service instead of generic content lookup
    const { documentsService } = await import('./documentsService');

    try {
      // Try to get from documentsContent collection first
      const documentsContentResult = await this.getActiveContent<DocumentsContent>('documentsContent');
      if (documentsContentResult) {
        return documentsContentResult;
      }

      // If no documentsContent document, construct from document-categories
      const categories = await documentsService.getCategories();
      const categoryIds = categories.map(cat => cat.id);

      return {
        id: 'constructed',
        title: "T√†i Li·ªáu L·ªãch S·ª≠",
        subtitle: "Kho t√†ng t√†i li·ªáu qu√Ω",
        description: "Kh√°m ph√° b·ªô s∆∞u t·∫≠p t√†i li·ªáu l·ªãch s·ª≠ qu√Ω gi√° v·ªÅ Ch·ªß t·ªãch H·ªì Ch√≠ Minh v√† l·ªãch s·ª≠ Vi·ªát Nam.",
        categories: categoryIds,
        layout: 'grid',
        isActive: true,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      } as DocumentsContent;

    } catch (error) {
      console.error('Error in getDocumentsContent:', error);
      return null;
    }
  }

  async updateDocumentsContent(id: string, data: Partial<DocumentsContent>): Promise<void> {
    return this.updateContent<DocumentsContent>('documentsContent', id, data);
  }

  async createDocumentsContent(data: Omit<DocumentsContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<DocumentsContent>('documentsContent', data);
  }

  // ===== DOCUMENT CATEGORIES =====
  async getDocumentCategories(): Promise<any[]> {
    try {
      const q = query(
        collection(db, 'document-categories'),
        where('isActive', '==', true),
        orderBy('order', 'asc')
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error fetching document categories:', error);
      return [];
    }
  }

  // ===== DOCUMENTS =====
  async getDocuments(): Promise<any[]> {
    try {
      const q = query(
        collection(db, 'documents'),
        where('isActive', '==', true),
        orderBy('order', 'asc')
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error fetching documents:', error);

      // Fallback: Try without orderBy if index is missing
      try {
        const fallbackQ = query(
          collection(db, 'documents'),
          where('isActive', '==', true)
        );

        const snapshot = await getDocs(fallbackQ);
        const docs = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));

        // Sort manually
        return docs.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));
      } catch (fallbackError) {
        console.error('Fallback query also failed:', fallbackError);
        return [];
      }
    }
  }

  async getDocumentsByCategory(category: string): Promise<any[]> {
    try {
      const q = query(
        collection(db, 'documents'),
        where('category', '==', category),
        where('isActive', '==', true),
        orderBy('order', 'asc')
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      } catch (indexError) {
        // Fallback for category-specific queries
        try {
          const categoryFallbackQ = query(
            collection(db, 'documents'),
            where('category', '==', category),
            where('isActive', '==', true)
          );

          const snapshot = await getDocs(categoryFallbackQ);
          const docs = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }));

        // Sort manually
        return docs.sort((a: any, b: any) => (a.order || 0) - (b.order || 0));
      } catch (fallbackError) {
        console.error('Fallback query for category also failed:', fallbackError);
        return [];
      }
    }
  }

  async getFeaturedDocuments(limitCount: number = 6): Promise<any[]> {
    try {
      const q = query(
        collection(db, 'documents'),
        where('isFeatured', '==', true),
        where('isActive', '==', true),
        orderBy('order', 'asc'),
        limit(limitCount)
      );

      const snapshot = await getDocs(q);
      return snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    } catch (error) {
      console.error('Error fetching featured documents:', error);
      return [];
    }
  }

  // ===== VR TECHNOLOGY SECTION =====
  async getVRContent(): Promise<VRContent | null> {
    // Use dedicated VR service instead of generic content lookup
    const { vrContentService } = await import('./vrContentService');
    return vrContentService.getVRContent();
  }

  async updateVRContent(id: string, data: Partial<VRContent>): Promise<void> {
    return this.updateContent<VRContent>('vrContent', id, data);
  }

  async createVRContent(data: Omit<VRContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<VRContent>('vrContent', data);
  }

  // ===== MINI GAME SECTION =====
  async getMiniGameContent(): Promise<MiniGameContent | null> {
    // Use dedicated mini games service instead of generic content lookup
    const { modernMiniGamesService } = await import('./miniGamesService');

    try {
      // Try to get from miniGameContent collection first
      const miniGameContentResult = await this.getActiveContent<MiniGameContent>('miniGameContent');
      if (miniGameContentResult) {
        return miniGameContentResult;
      }

      // If no miniGameContent document, construct from mini-games collection
      const games = await modernMiniGamesService.getAllGames({ isActive: true });

      // Convert to legacy format for compatibility
      const legacyGames = games.map(game => ({
        id: game.id,
        title: game.title,
        description: game.description,
        difficulty: game.difficulty,
        playerCount: `${game.players} ng∆∞·ªùi ch∆°i`,
        icon: game.icon,
        color: game.color,
        gameUrl: `/games/${game.id}`
      }));

      const achievements = [
        { icon: "Trophy", title: "Th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c", count: "2,450", description: "T·ªïng s·ªë ƒëi·ªÉm t√≠ch l≈©y" },
        { icon: "Star", title: "Quiz ho√†n th√†nh", count: "156", description: "S·ªë quiz ƒë√£ ho√†n th√†nh" },
        { icon: "Target", title: "C·∫•p ƒë·ªô hi·ªán t·∫°i", count: "12", description: "Level cao nh·∫•t ƒë·∫°t ƒë∆∞·ª£c" }
      ];

      const leaderboard = [
        { rank: 1, name: "Nguy·ªÖn VƒÉn A", score: "2,450", badge: "ü•á" },
        { rank: 2, name: "Tr·∫ßn Th·ªã B", score: "2,380", badge: "ü•à" },
        { rank: 3, name: "L√™ VƒÉn C", score: "2,290", badge: "ü•â" },
        { rank: 4, name: "Ph·∫°m Th·ªã D", score: "2,150", badge: "üèÖ" },
        { rank: 5, name: "Ho√†ng VƒÉn E", score: "2,100", badge: "üèÖ" }
      ];

      return {
        id: 'constructed',
        title: "Mini Games Gi√°o D·ª•c",
        subtitle: "H·ªçc l·ªãch s·ª≠ qua tr√≤ ch∆°i",
        description: "H·ªçc l·ªãch s·ª≠ m·ªôt c√°ch vui v·∫ª v√† h·∫•p d·∫´n th√¥ng qua c√°c tr√≤ ch∆°i t∆∞∆°ng t√°c.",
        games: legacyGames,
        achievements,
        leaderboard,
        isActive: true,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      } as MiniGameContent;

    } catch (error) {
      console.error('Error in getMiniGameContent:', error);
      return null;
    }
  }

  async updateMiniGameContent(id: string, data: Partial<MiniGameContent>): Promise<void> {
    return this.updateContent<MiniGameContent>('miniGameContent', id, data);
  }

  async createMiniGameContent(data: Omit<MiniGameContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<MiniGameContent>('miniGameContent', data);
  }

  // ===== NAVIGATION =====
  async getNavigationContent(): Promise<NavigationContent | null> {
    return this.getActiveContent<NavigationContent>('navigationContent');
  }

  async updateNavigationContent(id: string, data: Partial<NavigationContent>): Promise<void> {
    return this.updateContent<NavigationContent>('navigationContent', id, data);
  }

  async createNavigationContent(data: Omit<NavigationContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<NavigationContent>('navigationContent', data);
  }

  // ===== FOOTER =====
  async getFooterContent(): Promise<FooterContent | null> {
    return this.getActiveContent<FooterContent>('footerContent');
  }

  async updateFooterContent(id: string, data: Partial<FooterContent>): Promise<void> {
    return this.updateContent<FooterContent>('footerContent', id, data);
  }

  async createFooterContent(data: Omit<FooterContent, 'id' | 'createdAt' | 'updatedAt'>): Promise<string> {
    return this.createContent<FooterContent>('footerContent', data);
  }

  // ===== SITE CONFIGURATION =====
  async getSiteConfig(): Promise<SiteConfig | null> {
    try {
      const docRef = doc(db, 'siteConfig', 'main');
      const docSnap = await getDoc(docRef);

      if (!docSnap.exists()) return null;

      return { id: docSnap.id, ...docSnap.data() } as SiteConfig;
    } catch (error) {
      console.error('Error fetching site config:', error);
      throw error;
    }
  }

  async updateSiteConfig(data: Partial<SiteConfig>): Promise<void> {
    try {
      const docRef = doc(db, 'siteConfig', 'main');
      await updateDoc(docRef, {
        ...data,
        updatedAt: Timestamp.now()
      });
    } catch (error) {
      console.error('Error updating site config:', error);
      throw error;
    }
  }

  // ===== SYSTEM NOTIFICATIONS =====
  async getActiveNotifications(): Promise<SystemNotification[]> {
    try {
      const now = Timestamp.now();
      const q = query(
        collection(db, 'systemNotifications'),
        where('isActive', '==', true),
        where('displayFrom', '<=', now),
        orderBy('displayFrom', 'desc'),
        orderBy('priority', 'desc')
      );

      const snapshot = await getDocs(q);
      const notifications = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as SystemNotification[];

      // Filter out expired notifications
      return notifications.filter(notification =>
        !notification.displayUntil || notification.displayUntil > now
      );
    } catch (error) {
      console.error('Error fetching notifications:', error);
      throw error;
    }
  }

  async createNotification(data: Omit<SystemNotification, 'id' | 'createdAt'>): Promise<string> {
    return this.createContent<SystemNotification>('systemNotifications', data);
  }

  async deactivateNotification(id: string): Promise<void> {
    return this.updateContent<SystemNotification>('systemNotifications', id, { isActive: false });
  }

  // ===== BATCH OPERATIONS =====
  async initializeDefaultContent(): Promise<void> {
    try {
      const batch = writeBatch(db);

      // Default Hero Content
      const heroRef = doc(collection(db, 'heroContent'));
      batch.set(heroRef, {
        title: "H√†nh Tr√¨nh ƒê·ªãa ƒëi·ªÉm ",
        subtitle: "Kh√°m Ph√° ƒê·ªãa ƒëi·ªÉm  VƒÉn H√≥a Vi·ªát Nam",
        description: "Tr·∫£i nghi·ªám t∆∞∆°ng t√°c v·ªõi nh·ªØng ƒê·ªãa ƒëi·ªÉm  vƒÉn h√≥a qu√Ω gi√° c·ªßa Vi·ªát Nam th√¥ng qua c√¥ng ngh·ªá VR v√† AR hi·ªán ƒë·∫°i",
        stats: [
          { icon: "MapPin", number: "50+", label: "Di t√≠ch l·ªãch s·ª≠", color: "text-blue-400" },
          { icon: "Users", number: "10K+", label: "Ng∆∞·ªùi tham quan", color: "text-green-400" },
          { icon: "Clock", number: "24/7", label: "Truy c·∫≠p tr·ª±c tuy·∫øn", color: "text-purple-400" },
          { icon: "Star", number: "4.9/5", label: "ƒê√°nh gi√°", color: "text-yellow-400" }
        ],
        actionButton: {
          text: "B·∫Øt ƒë·∫ßu kh√°m ph√°",
          targetSection: "introduction"
        },
        backgroundElements: {
          enableFlags: true,
          enableStars: true,
          enableDecorations: true
        },
        isActive: true,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      // Default Navigation Content
      const navRef = doc(collection(db, 'navigationContent'));
      batch.set(navRef, {
        logo: {
          text: "Heritage Journey",
          iconName: "Compass"
        },
        menuItems: [
          { id: "home", label: "Trang ch·ªß", href: "/", order: 1, isActive: true },
          { id: "map", label: "B·∫£n ƒë·ªì", href: "#map", targetSection: "map", order: 2, isActive: true },
          { id: "documents", label: "T√†i li·ªáu", href: "/documents", order: 3, isActive: true },
          { id: "games", label: "Tr√≤ ch∆°i", href: "/games", order: 4, isActive: true },
          { id: "vr", label: "VR", href: "/vr", order: 5, isActive: true }
        ],
        mobileMenuEnabled: true,
        isActive: true,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      // Default Site Config
      const configRef = doc(db, 'siteConfig', 'main');
      batch.set(configRef, {
        siteName: "Heritage Journey - H√†nh Tr√¨nh ƒê·ªãa ƒëi·ªÉm ",
        siteDescription: "Kh√°m ph√° ƒê·ªãa ƒëi·ªÉm  vƒÉn h√≥a Vi·ªát Nam th√¥ng qua c√¥ng ngh·ªá VR/AR",
        logoUrl: "/logo.png",
        faviconUrl: "/favicon.ico",
        primaryColor: "#1f2937",
        secondaryColor: "#3b82f6",
        accentColor: "#f59e0b",
        features: {
          vrEnabled: true,
          quizEnabled: true,
          commentsEnabled: true,
          analyticsEnabled: true,
          multiLanguageEnabled: false
        },
        seo: {
          metaTitle: "Heritage Journey - Kh√°m Ph√° ƒê·ªãa ƒëi·ªÉm  VƒÉn H√≥a Vi·ªát Nam",
          metaDescription: "Tr·∫£i nghi·ªám t∆∞∆°ng t√°c v·ªõi ƒê·ªãa ƒëi·ªÉm  vƒÉn h√≥a Vi·ªát Nam qua c√¥ng ngh·ªá VR/AR hi·ªán ƒë·∫°i",
          keywords: ["ƒê·ªãa ƒëi·ªÉm  vƒÉn h√≥a", "Vi·ªát Nam", "VR", "AR", "l·ªãch s·ª≠", "du l·ªãch"],
          ogImageUrl: "/og-image.jpg"
        },
        socialMedia: {
          facebook: "https://facebook.com/heritagejourney",
          youtube: "https://youtube.com/heritagejourney"
        },
        contact: {
          email: "info@heritagejourney.vn",
          phone: "+84 123 456 789",
          address: "H√† N·ªôi, Vi·ªát Nam"
        },
        maintenance: {
          enabled: false,
          message: "Website ƒëang b·∫£o tr√¨, vui l√≤ng quay l·∫°i sau."
        },
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      await batch.commit();
    } catch (error) {
      console.error('Error initializing default content:', error);
      throw error;
    }
  }

  // ===== REAL-TIME SUBSCRIPTIONS =====
  subscribeToContent<T>(
    collectionName: string,
    callback: (content: T | null) => void
  ): () => void {
    const q = query(
      collection(db, collectionName),
      where('isActive', '==', true),
      limit(1)
    );

    return onSnapshot(q, (snapshot) => {
      if (snapshot.empty) {
        callback(null);
        return;
      }

      const doc = snapshot.docs[0];
      const content = { id: doc.id, ...doc.data() } as T;
      callback(content);
    }, (error) => {
      console.error(`Error in ${collectionName} subscription:`, error);
      callback(null);
    });
  }

  subscribeToHeroContent(callback: (content: HeroContent | null) => void): () => void {
    return this.subscribeToContent<HeroContent>('heroContent', callback);
  }

  subscribeToNavigationContent(callback: (content: NavigationContent | null) => void): () => void {
    return this.subscribeToContent<NavigationContent>('navigationContent', callback);
  }

  subscribeToSiteConfig(callback: (config: SiteConfig | null) => void): () => void {
    const docRef = doc(db, 'siteConfig', 'main');
    return onSnapshot(docRef, (doc) => {
      if (doc.exists()) {
        callback({ id: doc.id, ...doc.data() } as SiteConfig);
      } else {
        callback(null);
      }
    }, (error) => {
      console.error('Error in site config subscription:', error);
      callback(null);
    });
  }

  // ===== INITIALIZE DEFAULT PAGE CONTENT =====
  async initializeDefaultPageContent(): Promise<void> {
    try {
      const batch = writeBatch(db);

      // Default Documents Content
      const defaultDocumentsContent = {
        title: "T∆∞ li·ªáu v·ªÅ Ch·ªß t·ªãch H·ªì Ch√≠ Minh",
        subtitle: "Kho t√†ng t∆∞ li·ªáu qu√Ω gi√°",
        description: "Kho t√†ng t∆∞ li·ªáu qu√Ω gi√° v·ªÅ cu·ªôc ƒë·ªùi v√† s·ª± nghi·ªáp c·ªßa v·ªã l√£nh t·ª• vƒ© ƒë·∫°i, bao g·ªìm vƒÉn b·∫£n, h√¨nh ·∫£nh v√† video l·ªãch s·ª≠ ƒë∆∞·ª£c s∆∞u t·∫≠p v√† b·∫£o qu·∫£n c·∫©n th·∫≠n.",
        categories: [
          {
            id: 'declarations',
            icon: 'FileText',
            title: 'Tuy√™n ng√¥n v√† VƒÉn ki·ªán',
            description: 'C√°c vƒÉn b·∫£n ch√≠nh th·ª©c quan tr·ªçng nh·∫•t',
            items: [
              'Tuy√™n ng√¥n ƒë·ªôc l·∫≠p 2/9/1945',
              'Di ch√∫c c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh',
              'L·ªùi k√™u g·ªçi to√†n qu·ªëc kh√°ng chi·∫øn'
            ]
          },
          {
            id: 'writings',
            icon: 'BookOpen',
            title: 'T√°c ph·∫©m v√† B√†i vi·∫øt',
            description: 'Nh·ªØng b√†i vi·∫øt, t√°c ph·∫©m c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh',
            items: [
              'ƒê∆∞·ªùng K√°ch m·ªánh',
              'Nh·∫≠t k√Ω trong t√π'
            ]
          },
          {
            id: 'photos',
            icon: 'Image',
            title: 'H√¨nh ·∫£nh l·ªãch s·ª≠',
            description: 'B·ªô s∆∞u t·∫≠p ·∫£nh qu√Ω hi·∫øm v·ªÅ cu·ªôc ƒë·ªùi B√°c',
            items: [
              '·∫¢nh th·ªùi tr·∫ª ·ªü Paris',
              '·∫¢nh trong chi·∫øn khu Vi·ªát B·∫Øc'
            ]
          },
          {
            id: 'videos',
            icon: 'Video',
            title: 'Video t∆∞ li·ªáu',
            description: 'Nh·ªØng th∆∞·ªõc phim qu√Ω gi√° ghi l·∫°i ho·∫°t ƒë·ªông c·ªßa B√°c',
            items: [
              'ƒê·ªçc Tuy√™n ng√¥n ƒë·ªôc l·∫≠p',
              'G·∫∑p g·ª° ƒë·∫°i bi·ªÉu c√°c d√¢n t·ªôc'
            ]
          }
        ],
        featuredDocument: {
          title: "T√†i li·ªáu n·ªïi b·∫≠t: Tuy√™n ng√¥n ƒë·ªôc l·∫≠p 2/9/1945",
          quote: "T·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu sinh ra c√≥ quy·ªÅn b√¨nh ƒë·∫≥ng. T·∫°o h√≥a cho h·ªç nh·ªØng quy·ªÅn kh√¥ng ai c√≥ th·ªÉ x√¢m ph·∫°m ƒë∆∞·ª£c; trong nh·ªØng quy·ªÅn ·∫•y, c√≥ quy·ªÅn ƒë∆∞·ª£c s·ªëng, quy·ªÅn t·ª± do v√† quy·ªÅn m∆∞u c·∫ßu h·∫°nh ph√∫c.",
          description: "VƒÉn ki·ªán l·ªãch s·ª≠ quan tr·ªçng nh·∫•t, ƒë∆∞·ª£c UNESCO c√¥ng nh·∫≠n l√† ƒê·ªãa ƒëi·ªÉm  t√†i li·ªáu th·∫ø gi·ªõi"
        },
        isActive: true
      };

      const documentsRef = doc(collection(db, 'documentsContent'));
      batch.set(documentsRef, {
        ...defaultDocumentsContent,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      // Default VR Content
      const defaultVRContent = {
        title: "Tr·∫£i nghi·ªám VR",
        subtitle: "C√¥ng ngh·ªá th·ª±c t·∫ø ·∫£o ti√™n ti·∫øn",
        description: "H√£y ƒë·∫Øm ch√¨m trong l·ªãch s·ª≠ th√¥ng qua c√¥ng ngh·ªá th·ª±c t·∫ø ·∫£o ti√™n ti·∫øn, tr·∫£i nghi·ªám nh·ªØng kho·∫£nh kh·∫Øc l·ªãch s·ª≠ nh∆∞ ƒëang th·ª±c s·ª± c√≥ m·∫∑t t·∫°i ƒë√≥.",
        features: [
          {
            icon: "Glasses",
            title: "Th·ª±c t·∫ø ·∫£o 360¬∞",
            description: "Tr·∫£i nghi·ªám ho√†n to√†n immersive v·ªõi g√≥c nh√¨n 360 ƒë·ªô"
          },
          {
            icon: "Headphones",
            title: "√Çm thanh 3D",
            description: "√Çm thanh v√≤m ch·∫•t l∆∞·ª£ng cao t√°i t·∫°o kh√¥ng gian th·ª±c"
          },
          {
            icon: "Hand",
            title: "T∆∞∆°ng t√°c th·ª±c t·∫ø",
            description: "T∆∞∆°ng t√°c v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng v√† nh√¢n v·∫≠t trong m√¥i tr∆∞·ªùng VR"
          }
        ],
        experiences: [
          {
            id: 'kim-lien-vr',
            title: 'ThƒÉm quan Kim Li√™n VR',
            description: 'Kh√°m ph√° qu√™ h∆∞∆°ng B√°c H·ªì trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø ·∫£o ho√†n to√†n immersive',
            imageUrl: 'https://images.unsplash.com/photo-1593508512255-86ab42a8e620?w=600&h=400&fit=crop'
          },
          {
            id: 'ba-dinh-vr',
            title: 'Ch·ª©ng ki·∫øn Tuy√™n ng√¥n ƒë·ªôc l·∫≠p',
            description: 'Tham d·ª± l·ªÖ ƒë·ªçc Tuy√™n ng√¥n ƒë·ªôc l·∫≠p t·∫°i Qu·∫£ng tr∆∞·ªùng Ba ƒê√¨nh ng√†y 2/9/1945',
            imageUrl: 'https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=600&h=400&fit=crop'
          }
        ],
        benefits: {
          title: "L·ª£i √≠ch c·ªßa VR",
          description: "C√¥ng ngh·ªá VR mang l·∫°i tr·∫£i nghi·ªám h·ªçc t·∫≠p v∆∞·ª£t tr·ªôi",
          stats: [
            { percentage: "95%", label: "TƒÉng kh·∫£ nƒÉng ghi nh·ªõ" },
            { percentage: "87%", label: "C·∫£i thi·ªán s·ª± t·∫≠p trung" },
            { percentage: "92%", label: "N√¢ng cao h·ª©ng th√∫ h·ªçc t·∫≠p" }
          ]
        },
        isActive: true
      };

      const vrRef = doc(collection(db, 'vrContent'));
      batch.set(vrRef, {
        ...defaultVRContent,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      // Default Mini Game Content
      const defaultMiniGameContent = {
        title: "Mini Games gi√°o d·ª•c",
        subtitle: "H·ªçc l·ªãch s·ª≠ qua tr√≤ ch∆°i",
        description: "H·ªçc l·ªãch s·ª≠ m·ªôt c√°ch vui v·∫ª v√† h·∫•p d·∫´n th√¥ng qua c√°c tr√≤ ch∆°i t∆∞∆°ng t√°c, gi√∫p c·ªßng c·ªë ki·∫øn th·ª©c v√† t·∫°o ƒë·ªông l·ª±c h·ªçc t·∫≠p.",
        games: [
          {
            id: 'quiz-history',
            title: 'Quiz ki·∫øn th·ª©c l·ªãch s·ª≠',
            description: 'Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ cu·ªôc ƒë·ªùi v√† s·ª± nghi·ªáp c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh',
            difficulty: 'Trung b√¨nh' as const,
            playerCount: '1 ng∆∞·ªùi ch∆°i',
            icon: 'Trophy',
            color: 'from-green-500 to-green-600'
          },
          {
            id: 'journey-path',
            title: 'H√†nh tr√¨nh t√¨m ƒë∆∞·ªùng c·ª©u n∆∞·ªõc',
            description: 'Kh√°m ph√° c√°c ƒë·ªãa ƒëi·ªÉm B√°c H·ªì ƒë√£ ƒëi qua trong h√†nh tr√¨nh 30 nƒÉm t√¨m ƒë∆∞·ªùng c·ª©u n∆∞·ªõc',
            difficulty: 'D·ªÖ' as const,
            playerCount: '1 ng∆∞·ªùi ch∆°i',
            icon: 'Target',
            color: 'from-blue-500 to-blue-600'
          },
          {
            id: 'puzzle-heritage',
            title: 'Gh√©p h√¨nh di t√≠ch',
            description: 'Gh√©p c√°c m·∫£nh h√¨nh ƒë·ªÉ t·∫°o th√†nh nh·ªØng di t√≠ch l·ªãch s·ª≠ quan tr·ªçng',
            difficulty: 'Kh√≥' as const,
            playerCount: '1 ng∆∞·ªùi ch∆°i',
            icon: 'Zap',
            color: 'from-purple-500 to-purple-600'
          }
        ],
        achievements: [
          {
            icon: 'Trophy',
            title: 'Th√†nh t·ª±u ƒë·∫°t ƒë∆∞·ª£c',
            count: '2,450',
            description: 'T·ªïng s·ªë ƒëi·ªÉm t√≠ch l≈©y'
          },
          {
            icon: 'Star',
            title: 'Quiz ho√†n th√†nh',
            count: '156',
            description: 'S·ªë quiz ƒë√£ ho√†n th√†nh'
          },
          {
            icon: 'Target',
            title: 'C·∫•p ƒë·ªô hi·ªán t·∫°i',
            count: '12',
            description: 'Level cao nh·∫•t ƒë·∫°t ƒë∆∞·ª£c'
          }
        ],
        leaderboard: [
          { rank: 1, name: 'Nguy·ªÖn VƒÉn A', score: '2,450', badge: 'ü•á' },
          { rank: 2, name: 'Tr·∫ßn Th·ªã B', score: '2,380', badge: 'ü•à' },
          { rank: 3, name: 'L√™ VƒÉn C', score: '2,290', badge: 'ü•â' },
          { rank: 4, name: 'Ph·∫°m Th·ªã D', score: '2,150', badge: 'üèÖ' },
          { rank: 5, name: 'Ho√†ng VƒÉn E', score: '2,100', badge: 'üèÖ' }
        ],
        isActive: true
      };

      const miniGameRef = doc(collection(db, 'miniGameContent'));
      batch.set(miniGameRef, {
        ...defaultMiniGameContent,
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now()
      });

      await batch.commit();
    } catch (error) {
      console.error('Error initializing default page content:', error);
      throw error;
    }
  }
}

export const contentService = new ContentService();
